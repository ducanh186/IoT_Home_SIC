#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// ==== C·∫£m bi·∫øn DHT11 ====
#define DHTPIN 17
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// ==== C·∫£m bi·∫øn n∆∞·ªõc v√† LED ====
#define WATER_SENSOR_PIN 15
#define GREEN_LED 4   // S·ª≠a t√™n LED t·∫°i ƒë√¢y
bool lastWaterState = HIGH;

// ==== WiFi Configuration ====
const char* ssid = "B5 205";
const char* wifi_password = "Ktx2052023";

// ==== MQTT Configuration ====
const char* mqtt_server = "192.168.1.70";
const char* mqtt_username = "pi101";
const char* mqtt_password = "1234";
const char* clientID = "ESP32_Safety_Monitor";

// ==== MQTT Topics ====
const char* temperature_topic = "temperature";
const char* humidity_topic = "humidity";
const char* water_topic = "water_detected";
const char* rain_topic = "rain_alert";  // Th√™m topic tr·ªùi m∆∞a

// ==== WiFi & MQTT ====
WiFiClient wifiClient;
PubSubClient client(mqtt_server, 1883, wifiClient);

enum HumidityLevel {
  HUMIDITY_LOW,
  HUMIDITY_HIGH
};

struct SystemData {
  float temperature;
  float humidity;
  bool waterState;
  HumidityLevel humidityStatus;
  bool isDataValid;
};

SystemData data;

// ==== H√†m k·∫øt n·ªëi WiFi ====
void connectWiFi() {
  Serial.print("ƒêang k·∫øt n·ªëi WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, wifi_password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

// ==== H√†m k·∫øt n·ªëi MQTT ====
void connectMQTT() {
  while (!client.connected()) {
    Serial.print("ƒêang k·∫øt n·ªëi MQTT...");
    if (client.connect(clientID, mqtt_username, mqtt_password)) {
      Serial.println("‚úÖ MQTT k·∫øt n·ªëi th√†nh c√¥ng");
    } else {
      Serial.print("‚ùå L·ªói MQTT: ");
      Serial.print(client.state());
      Serial.println(" ‚Üí th·ª≠ l·∫°i sau 5s");
      delay(5000);
    }
  }
}

// ==== SETUP ====
void setup() {
  Serial.begin(115200);
  dht.begin();

  pinMode(WATER_SENSOR_PIN, INPUT);
  pinMode(GREEN_LED, OUTPUT);          // S·ª≠ d·ª•ng GREEN_LED
  digitalWrite(GREEN_LED, LOW);        // T·∫Øt LED ban ƒë·∫ßu

  Serial.println("Kh·ªüi ƒë·ªông h·ªá th·ªëng: DHT11 + Water Sensor + GREEN LED");

  connectWiFi();
  connectMQTT();
}

// ==== LOOP ====
void loop() {
  if (!client.connected()) {
    connectMQTT();
  }
  client.loop();

  // --- ƒê·ªçc DHT11 ---
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  if (!isnan(h) && !isnan(t)) {
    data.temperature = t;
    data.humidity = h;
    data.isDataValid = true;

    // Ph√¢n lo·∫°i m·ª©c ƒë·ªô ·∫©m
    if (h < 80.0) {
      data.humidityStatus = HUMIDITY_LOW;
      digitalWrite(GREEN_LED, LOW);  // ·∫®m th·∫•p ‚Üí b·∫≠t LED (low l√† b·∫≠t LED n·∫øu d√πng active-low)
    } else {
      data.humidityStatus = HUMIDITY_HIGH;
      digitalWrite(GREEN_LED, HIGH); // ·∫®m cao ‚Üí t·∫Øt LED
    }

    Serial.print("üå°Ô∏è Nhi·ªát ƒë·ªô: ");
    Serial.print(data.temperature);
    Serial.print(" ¬∞C\tüíß ƒê·ªô ·∫©m: ");
    Serial.print(data.humidity);
    Serial.println(" %");

    // --- G·ª≠i d·ªØ li·ªáu l√™n MQTT ---
    char tempStr[10];
    char humidStr[10];
    dtostrf(data.temperature, 1, 2, tempStr);
    dtostrf(data.humidity, 1, 2, humidStr);
    client.publish(temperature_topic, tempStr);
    client.publish(humidity_topic, humidStr);
  } else {
    data.isDataValid = false;
    Serial.println("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ DHT11!");
  }

  // --- ƒê·ªçc c·∫£m bi·∫øn n∆∞·ªõc ---
  data.waterState = digitalRead(WATER_SENSOR_PIN);
  if (data.waterState != lastWaterState) {
    if (data.waterState == HIGH) {
      Serial.println(">> C·∫¢NH B√ÅO: Ph√°t hi·ªán n∆∞·ªõc! B·∫≠t LED.");
      digitalWrite(GREEN_LED, HIGH); // C·∫£nh b√°o n∆∞·ªõc ‚Üí b·∫≠t LED
    } else {
      Serial.println(">> An to√†n: Kh√¥ng c√≥ n∆∞·ªõc. T·∫Øt LED.");
      digitalWrite(GREEN_LED, LOW);
    }
    lastWaterState = data.waterState;

    // G·ª≠i tr·∫°ng th√°i n∆∞·ªõc l√™n MQTT
    const char* waterMsg = data.waterState == HIGH ? "Troi mua" : "Troi khong mua";
    client.publish(water_topic, waterMsg);
  }

  // --- Th√¥ng b√°o tr·ªùi m∆∞a l√™n topic rain_alert ---
  if (data.humidity > 80 || data.waterState == HIGH) {
    Serial.println("‚òî Tr·ªùi m∆∞a (ƒë·ªô ·∫©m cao ho·∫∑c ph√°t hi·ªán n∆∞·ªõc)");
    client.publish(rain_topic, "Tr·ªùi ƒëang m∆∞a");
  } else {
    client.publish(rain_topic, "Tr·ªùi kh√¥ r√°o");
  }

  delay(2000);
}
